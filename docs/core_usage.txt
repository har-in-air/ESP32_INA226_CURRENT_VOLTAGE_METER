https://www.esp32.com/viewtopic.php?t=5906

perigalacticon wrote:
My understanding is that Arduino code runs on Core#1, named APP_CPU. 
And low-level WIFI operations run on Core#0, named PRO_CPU.

Yes that is correct. What happens is a FreeRTOS task that is pinned to Core 1 is created 
(called loopTask). The loopTask will run setup() once, then run loop() repeatedly 

extracted from https://github.com/espressif/arduino-esp32/blob/master/cores/esp32/main.cpp


void loopTask(void *pvParameters)
{
    setup();
    for(;;) {
#if CONFIG_FREERTOS_UNICORE
        yieldIfNecessary();
#endif
        if(loopTaskWDTEnabled){
            esp_task_wdt_reset();
        }
        loop();
        if (serialEventRun) serialEventRun();
    }
}

extern "C" void app_main()
{
#if ARDUINO_USB_CDC_ON_BOOT
    Serial.begin();
#endif
#if ARDUINO_USB_MSC_ON_BOOT
    MSC_Update.begin();
#endif
#if ARDUINO_USB_DFU_ON_BOOT
    USB.enableDFU();
#endif
#if ARDUINO_USB_ON_BOOT
    USB.begin();
#endif
    loopTaskWDTEnabled = false;
    initArduino();
    xTaskCreateUniversal(loopTask, "loopTask", getArduinoLoopTaskStackSize(), NULL, 1, &loopTaskHandle, ARDUINO_RUNNING_CORE);
}

perigalacticon wrote:
If so, do any WIFI operations (ie. interrrupts) also run on Core#1 ?

In theory there shouldn't be, as interrupts are allocated to whichever core the allocation 
API was called from. Since the WiFi tasks runs on Core 0, its corresponding interrupts 
should also be allocated to Core 0.

perigalacticon wrote:
Which core is more free of resources or interrupts in general ?

Core 1 is generally more free of resources. The underlying intention is to have Core 0 handle 
most protocol processing (hence PRO_CPU) and have the application code run mostly on Core 1 
(hence APP_CPU). However there might be cases where the application code requires heavy 
processing whilst there is minimal protocol processing, in which case it would make sense 
to shift some application processing to Core 0.